from typing import List, Dict
from bitrate_analyzer import get_bitrate
from vmaf_calculator import calculate_vmaf
from json_parser import parse_vmaf_json, parse_vmaf_detailed  # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ json_parser
from plot_generator import generate_plot
from report_result import print_results


def analyze_video_quality(resolutions: List[str], reference_video: str) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    """

    bitrates: List[int] = []
    vmaf_scores: List[float] = []
    detailed_stats: List[Dict[str, float]] = []

    for res in resolutions:
        test_video = f'big_buck_bunny_{res}.mp4'
        json_file = f'vmaf_{res}.json'

        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {res}...")

        try:
            # –ü–æ–ª—É—á–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç
            bitrate = get_bitrate(test_video)
            bitrates.append(bitrate)

            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å VMAF
            calculate_vmaf(reference_video, test_video, json_file)

            # –ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—ã–π VMAF
            vmaf = parse_vmaf_json(json_file)
            vmaf_scores.append(vmaf)

            # –ò–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            detailed_stat = parse_vmaf_detailed(json_file)
            detailed_stats.append(detailed_stat)

            print(f"‚úÖ {res}: –ë–∏—Ç—Ä–µ–π—Ç = {bitrate} –∫–±–∏—Ç/—Å, VMAF = {vmaf:.2f}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {res}: {e}")
            continue

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if bitrates and vmaf_scores:
        generate_plot(bitrates, vmaf_scores, resolutions)
        print_results(resolutions, bitrates, vmaf_scores)

        print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VMAF:")
        for res, stats in zip(resolutions, detailed_stats):
            print(f"{res}: {stats}")
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    """
    resolutions = ['144p', '240p', '360p', '480p', '720p', '1080p']
    reference = 'big_buck_bunny_1080p24.y4m'

    print("üé¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ")
    analyze_video_quality(resolutions, reference)
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main()